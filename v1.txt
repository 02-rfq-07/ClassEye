import os
import face_recognition
import pickle
import cv2
import numpy as np
import csv
from datetime import datetime
from PIL import Image

def load_known_faces():
    """
    Load the trained face encodings from the model file
    """
    model_path = r"C:\Users\navee\Downloads\attendance_system\models\face_encodings.pkl"
    
    if not os.path.exists(model_path):
        print("‚ùå Model file not found! Please run train_model.py first.")
        return None, None
    
    with open(model_path, 'rb') as f:
        data = pickle.load(f)
    
    return data['encodings'], data['names']

def mark_attendance_from_image(image_path, tolerance=0.6):
    known_encodings, known_names = load_known_faces()
    if known_encodings is None:
        return []
    print(f"üì∏ Processing image: {image_path}")
    try:
        test_image = face_recognition.load_image_file(image_path)
    except Exception as e:
        print(f"‚ùå Error loading image: {str(e)}")
        return []

    face_locations = face_recognition.face_locations(test_image)
    face_encodings = face_recognition.face_encodings(test_image, face_locations)
    
    print(f"üë§ Found {len(face_locations)} face(s) in the image")
    
    present_people = []
    
    for i, face_encoding in enumerate(face_encodings):
        # Compare with known faces
        matches = face_recognition.compare_faces(known_encodings, face_encoding, tolerance=tolerance)
        face_distances = face_recognition.face_distance(known_encodings, face_encoding)
        
        if True in matches:
            # Find the best match
            best_match_index = np.argmin(face_distances)
            if matches[best_match_index]:
                name = known_names[best_match_index]
                confidence = 1 - face_distances[best_match_index]
                
                # Avoid duplicates
                if name not in present_people:
                    present_people.append(name)
                    print(f"‚úÖ Recognized: {name} (confidence: {confidence:.2f})")
                else:
                    print(f"üîÑ {name} already marked present")
        else:
            print(f"‚ùì Unknown person detected (Face #{i+1})")
    
    return present_people

def save_attendance(present_people, session_name=""):
    """
    Save attendance to CSV file
    """
    # Create attendance logs directory
    logs_dir = "attendance_logs"
    os.makedirs(logs_dir, exist_ok=True)
    
    # Generate filename with current date
    current_date = datetime.now().strftime("%Y-%m-%d")
    filename = f"attendance_{current_date}.csv"
    if session_name:
        filename = f"attendance_{current_date}_{session_name}.csv"
    
    filepath = os.path.join(logs_dir, filename)
    
    # Check if file exists to determine if we need headers
    file_exists = os.path.exists(filepath)
    
    # Write to CSV
    with open(filepath, 'a', newline='') as csvfile:
        writer = csv.writer(csvfile)
        
        # Write header if file is new
        if not file_exists:
            writer.writerow(['Date', 'Time', 'Name', 'Status'])
        
        # Write attendance data
        current_time = datetime.now().strftime("%H:%M:%S")
        current_date = datetime.now().strftime("%Y-%m-%d")
        
        for person in present_people:
            writer.writerow([current_date, current_time, person, 'Present'])
    
    print(f"üìÑ Attendance saved to: {filepath}")

def process_multiple_images():
    """
    Process all images in the test_images folder
    """
    test_dir = r"C:\Users\navee\Downloads\attendance_system\test_images"
    
    if not os.path.exists(test_dir):
        print(f"‚ùå Test images directory '{test_dir}' not found!")
        print("Please create the directory and add test images.")
        return
    
    image_files = [f for f in os.listdir(test_dir) 
                   if f.lower().endswith(('.jpg', '.jpeg', '.png'))]
    
    if not image_files:
        print(f"‚ùå No image files found in '{test_dir}'!")
        return
    
    all_present = set()
    
    print(f"üîÑ Processing {len(image_files)} image(s)...")
    print("="*50)
    
    for image_file in image_files:
        image_path = os.path.join(test_dir, image_file)
        present_in_image = mark_attendance_from_image(image_path)
        all_present.update(present_in_image)
        print("-"*30)
    
    # Final summary
    print("="*50)
    print("üìã ATTENDANCE SUMMARY")
    print("="*50)
    
    if all_present:
        print(f"‚úÖ Total people present: {len(all_present)}")
        for person in sorted(all_present):
            print(f"   ‚Ä¢ {person}")
        
        # Save to file
        save_attendance(list(all_present))
    else:
        print("‚ùå No known faces detected in any image.")

def mark_single_image():
    """
    Process a single image specified by user
    """
    image_path = input("Enter the path to the image file: ").strip()
    
    if not os.path.exists(image_path):
        print("‚ùå Image file not found!")
        return
    
    present_people = mark_attendance_from_image(image_path)
    
    if present_people:
        print(f"\n‚úÖ People present: {', '.join(present_people)}")
        
        save_choice = input("Save attendance to file? (y/n): ").strip().lower()
        if save_choice == 'y':
            session_name = input("Enter session name (optional): ").strip()
            save_attendance(present_people, session_name)
    else:
        print("\n‚ùå No known faces detected.")

def main():
    print("="*50)
    print("üéØ FACE RECOGNITION ATTENDANCE SYSTEM")
    print("="*50)
    
    print("\nChoose an option:")
    print("1. Process all images in test_images folder")
    print("2. Process a single image")
    print("3. Exit")
    
    choice = input("\nEnter your choice (1-3): ").strip()
    
    if choice == '1':
        process_multiple_images()
    elif choice == '2':
        mark_single_image()
    elif choice == '3':
        print("üëã Goodbye!")
        return
    else:
        print("‚ùå Invalid choice!")

if __name__ == "__main__":
    main()